@page "/CreateServicio"
@rendermode InteractiveServer
@attribute [Authorize]
@inject NavigationManager Navigation
@inject ServicioService servicioservice
@inject NotificationService notificationService
@inject InsumoService insumoService

<RadzenDialog @rendermode="RenderMode.InteractiveServer"></RadzenDialog>
<RadzenNotification @rendermode="RenderMode.InteractiveServer"></RadzenNotification>

<PageTitle>Registro de Servicios</PageTitle>
<EditForm Model="servicio" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="card shadow-lg">
        <div class="card-header">
            <h3>Registro de Servicios</h3>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col col-6">
                    <label>Tipo Servicio:</label>
                    <InputText @bind-Value="servicio.TipoServicio" class="form-control"></InputText>
                    <ValidationMessage For="(() => servicio.TipoServicio)"></ValidationMessage>
                </div>
                <div class="col col-6">
                    <label>Fecha Registro:</label>
                    <InputDate @bind-Value="servicio.FechaRegistro" class="form-control"></InputDate>
                    <ValidationMessage For="@(() => servicio.FechaRegistro)" />
                </div>
            </div>
            <div class="row">
                <div class="col col-4">
                    <label>Costo:</label>
                    <InputNumber @bind-Value="servicio.CostoServicio" class="form-control" disabled></InputNumber>
                    <ValidationMessage For="(() => servicio.CostoServicio)"></ValidationMessage>
                </div>
                <div class="col col-8">
                    <label>Descripci&oacute;n:</label>
                    <InputText @bind-Value="servicio.Descripcion" class="form-control"></InputText>
                    <ValidationMessage For="@(() => servicio.Descripcion)" />
                </div>
            </div>
            <div class="container mt-3">
                <div class="card-header">
                    <h4>Detalles del Servicio</h4>
                </div>
                <div class="card-body">

                    <div class="row">
                        <div class="col col-6">
                            <label>Insumo:</label>
                            <InputSelect @bind-Value="detalle.InsumoId" class="form-select">
                                <option value="0" selected disabled>Seleccione...</option>
                                @foreach (var item in listaInsumos)
                                {
                                    <option value="@item.InsumosId">@item.NombreInsumo</option>
                                }
                            </InputSelect>
                        </div>
                        <div class="col col-6">
                            <label>Cantidad:</label>
                            <InputNumber @bind-Value="detalle.Cantidad" class="form-control"></InputNumber>
                            <ValidationMessage For="(() => detalle.Cantidad)"></ValidationMessage>
                        </div>
                    </div>
                    <br />
                    <table class='table table-bordered table-hover'>
                        <thead>
                            <tr>
                                <th>Nombre del Insumo</th>
                                <th>Cantidad</th>
                                <th>Precio</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var detalle in servicio.ServiciosDetalle)
                            {
                                <tr>
                                    <td>@ObtenerNombreInsumo(detalle.InsumoId)</td>
                                    <td>@detalle.Cantidad</td>
                                    <td>@(ObtenerPrecioDetalle(detalle))</td>
                                    <td><button type="button" class="btn btn-outline-danger" @onclick="()=> EliminarDetalle(detalle)"><i class="bi bi-trash3-fill" /></button></td>

                                </tr>
                            }
                        </tbody>
                    </table>
                    <button type="button" @onclick="AgregarDetalle" class="btn btn-outline-primary bi bi-plus-square">Agregar</button>
                </div>

            </div>
            <div class="card-footer">
                <div class="input-group">
                    <a href="/IndexServicio" class="btn btn-outline-danger bi bi-arrow-return-left"> Volver</a>
                    <button type="submit" class="btn btn-outline-success bi bi-floppy-fill"> Guardar</button>
                </div>
            </div>
        </div>
    </div>


</EditForm>

@code {
    [Parameter]
    public int ServicioId { get; set; }
    public Servicios servicio { get; set; } = new Servicios();
    public List<Insumos> listaInsumos { get; set; } = new List<Insumos>();
    public ServiciosDetalle detalle = new ServiciosDetalle();


    protected override async Task OnInitializedAsync()
    {
        listaInsumos = await insumoService.Listar(t => true);
        servicio.FechaRegistro = DateTime.Now;
    }
    public async Task Buscar()
    {
        var servicioEncontrado = await servicioservice.Buscar(servicio.ServicioId);

        if (servicioEncontrado != null)
        {
            this.servicio = servicioEncontrado;
        }
    }
    public async Task Guardar()
    {
        var guardo = await servicioservice.Guardar(servicio);
        if (guardo)
        {
            notificationService.ShowNotification(
            titulo: "Exito",
            mensaje: "Guardado correctamente",
            NotificationSeverity.Success);

            await Task.Delay(3000);
            Atras();
        }
        else
        {
            notificationService.ShowNotification(
            titulo: "Error",
            mensaje: "Ocurrio un error y no fue posible guardar",
            NotificationSeverity.Error);
        }
    }
    public string ObtenerNombreInsumo(int insumo)
    {
        var NombreInsumo = listaInsumos.FirstOrDefault(i => i.InsumosId == insumo);
        return NombreInsumo != null ? NombreInsumo.NombreInsumo : string.Empty;
    }
    public float ObtenerPrecioDetalle(ServiciosDetalle detalle)
    {
        var insumoSeleccionado = listaInsumos.FirstOrDefault(i => i.InsumosId == detalle.InsumoId);
        if (insumoSeleccionado != null)
        {
            return insumoSeleccionado.Precio * detalle.Cantidad;
        }
        return 0f;
    }

    public void AgregarDetalle()
    {
        if (detalle.InsumoId != 0 && detalle.Cantidad != 0)
        {
            var insumoSeleccionado = listaInsumos.FirstOrDefault(i => i.InsumosId == detalle.InsumoId);
            if (insumoSeleccionado != null)
            {
                var costoDetalle = insumoSeleccionado.Precio * detalle.Cantidad;

                servicio.ServiciosDetalle.Add(detalle);

                servicio.CostoServicio += costoDetalle;

                var impuesto = costoDetalle * 0.18f;

                servicio.CostoServicio += impuesto;
                detalle = new ServiciosDetalle();
            }
        }
    }

    public void EliminarDetalle(ServiciosDetalle detail)
    {    
        detalle = detail;
        var precioDetalle = ObtenerPrecioDetalle(detail);

        var impuestoDetalle = precioDetalle * 0.18f;

        servicio.CostoServicio -= (precioDetalle + impuestoDetalle);

        servicio.ServiciosDetalle.Remove(detail);

    }
    void Atras()
    {
        Navigation.NavigateTo("/IndexServicio");
    }
}
