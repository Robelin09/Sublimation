@page "/EditCompra"
@page "/EditCompra/{CompraId:int}"
@rendermode InteractiveServer
@inject NavigationManager Navigation
@inject SuplidorService suplidorService
@inject UsuarioService usuarioservice
@attribute [Authorize]
@inject CompraService compraservice
@inject InsumoService insumoService
@inject NotificationService notificationService
<RadzenNotification @rendermode="RenderMode.InteractiveServer"></RadzenNotification>

<PageTitle>Edición de Compras</PageTitle>
<EditForm Model="compra" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card shadow-lg">
        <div class="card-header">
            <h3>Editar Compra</h3>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="row">
                    @*   <div class="col col-4">
                    <label>Compra Id:</label>
                    <InputNumber @bind-Value="compra.ComprasId" class="form-control"></InputNumber>
                    <ValidationMessage For="(() => compra.ComprasId)"></ValidationMessage>
                    </div> *@
                    <div class="col col-4">
                        <label>Suplidor Id:</label>
                        <InputSelect @bind-Value="compra.SuplidorId" class="form-select">
                            <option value="0" selected disabled>Seleccione...</option>
                            @foreach (var item in listaSuplidores)
                            {
                                <option value="@item.SuplidorId">@item.Nombre</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="(() => compra.SuplidorId)"></ValidationMessage>
                    </div>
                    <div class="col col-4">
                        <label>Usuario Id:</label>
                        <InputSelect @bind-Value="compra.UsuarioId" class="form-select">
                            <option value="0" selected disabled>Seleccione...</option>
                            @foreach (var item in listaUsuarios)
                            {
                                <option value="@item.UsuarioId">@item.Nombre</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="(() => compra.UsuarioId)"></ValidationMessage>
                    </div>
                </div>
                <div class="row">
                    <div class="col col-4">
                        <label>Fecha Compra:</label>
                        <InputDate @bind-Value="compra.FechaCompra" class="form-control"></InputDate>
                        <ValidationMessage For="(() => compra.FechaCompra)"></ValidationMessage>
                    </div>
                    <div class="col col-8">
                        <label>Descripci&oacute;n:</label>
                        <InputText @bind-Value="compra.Descripcion" class="form-control"></InputText>
                        <ValidationMessage For="(() => compra.Descripcion)"></ValidationMessage>
                    </div>
                </div>
            </div>
        </div>
        <div class="container">
            <div class="card-header">
                <h4>Detalles de la Compra</h4>
            </div>
            <div class="card-body">

                <div class="row">
                    <div class="col col-6">
                        <label>Insumo:</label>
                        <InputSelect @bind-Value="detalle.InsumoId" class="form-select">
                            <option value="0" selected disabled>Seleccione...</option>
                            @foreach (var item in listaInsumos)
                            {
                                <option value="@item.InsumosId">@item.InsumosId</option>
                            }
                        </InputSelect>
                    </div>
                    <div class="col col-6">
                        <label>Cantidad:</label>
                        <InputNumber @bind-Value="detalle.Cantidad" class="form-control"></InputNumber>
                        <ValidationMessage For="(() => detalle.Cantidad)"></ValidationMessage>
                    </div>
                 
                </div>
                <br />
                <table class='table table-bordered table-hover'>
                    <thead>
                        <tr>
                            <th></th>
                            <th>Nombre del Insumo</th>
                            <th>Cantidad</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var detalle in compra.ComprasDetalle)
                        {
                            <tr>
                                @if (!string.IsNullOrEmpty(detalle.ImagenURL))
                                {
                                    <img src="@detalle.ImagenURL" alt="Imagen del Insumo" style="max-width: 60px; max-height: 60px;">
                                }
                                <td>@ObtenerNombreInsumo(detalle.InsumoId)</td>
                                <td>@detalle.Cantidad</td>
@*                                 <td><button type="button" class="btn btn-outline-danger" @onclick="()=> EliminarDetalle(detalle)"><i class="bi bi-trash3-fill" /></button></td>
 *@                            </tr>
                        }
                    </tbody>
                </table>
                <button type="button" @onclick="AgregarDetalle" class="btn btn-outline-primary bi bi-plus-square">Agregar</button>

            </div>
        </div>
        <div class="card-footer">
            <div class="input-group">
                <a href="/IndexCompra" class="btn btn-outline-primary bi bi-arrow-return-left"> Volver</a>
                <button type="submit" class="btn btn-outline-success bi bi-floppy-fill"> Guardar</button>
            </div>
        </div>
    </div>

</EditForm>

@code {
    [Parameter]
    public int CompraId { get; set; }
    public Compras compra = new Compras();
    public ComprasDetalle detalle = new ComprasDetalle();

    public List<Insumos> listaInsumos = new List<Insumos>();
    public List<ComprasDetalle> ListaDetalles = new List<ComprasDetalle>();
    public List<Usuarios> listaUsuarios = new List<Usuarios>();
    public List<Suplidores> listaSuplidores = new List<Suplidores>();
    public List<ComprasDetalle> DetallesAgregado { get; set; } = new List<ComprasDetalle>();
    public List<ComprasDetalle> DetallesEliminado { get; set; } = new List<ComprasDetalle>();


    protected override async Task OnInitializedAsync()
    {
        listaInsumos = await insumoService.Listar(t => true);

        if (CompraId > 0)
        {
            compra = await compraservice.GetCompras(CompraId);
            if (compra != null)
            {
                ListaDetalles = compra.ComprasDetalle.ToList();
            }
            else
            {
                Navigation.NavigateTo("/Error");
            }
        }
        else
        {
            Navigation.NavigateTo("/Error");
        }
        listaUsuarios = await usuarioservice.Listar(t => true);
        listaSuplidores = await suplidorService.Listar(t => true);
        compra.FechaCompra = DateTime.Now;
    }
    public string ObtenerNombreInsumo(int insumo)
    {
        var NombreInsumo = listaInsumos.FirstOrDefault(c => c.InsumosId == insumo);
        return NombreInsumo != null ? NombreInsumo.NombreInsumo : string.Empty;
    }
    public async Task Guardar()
    {
        if (compra.SuplidorId <= 0 || compra.UsuarioId <= 0)
        {
            notificationService.ShowNotification(
                titulo: "Error",
                mensaje: "Debe seleccionar un suplidor y un usuario.",
                NotificationSeverity.Error);
            return;
        }
        else
        {
            if (compra.ComprasDetalle.Count == 0)
            {
                notificationService.ShowNotification(
                titulo: "Error",
                mensaje: "No se puede registrar una compra sin el detalle",
                NotificationSeverity.Error);
                return;
            }
        }
        var guardo = await compraservice.Guardar(compra);
        if (guardo)
        {
            notificationService.ShowNotification(
            titulo: "Exito",
            mensaje: "Guardado correctamente",
            NotificationSeverity.Success);

            foreach (var DetalleAgregado in DetallesAgregado)
            {
                var insumo = listaInsumos.FirstOrDefault(I => I.InsumosId == DetalleAgregado.InsumoId);
                if (insumo != null)
                {
                    insumo.Cantidad += DetalleAgregado.Cantidad;
                    await insumoService.Guardar(insumo);
                }
            }

            foreach (var DetalleEliminado in DetallesEliminado)
            {
                var insumo = listaInsumos.FirstOrDefault(I => I.InsumosId == DetalleEliminado.InsumoId);
                if (insumo != null)
                {
                    insumo.Cantidad -= DetalleEliminado.Cantidad;
                    await insumoService.Guardar(insumo);
                }
            }

            DetallesAgregado = new List<ComprasDetalle>();
            DetallesEliminado = new List<ComprasDetalle>();


            await Task.Delay(3000);
            Navigation.NavigateTo("/IndexCompra");
        }
        else
        {
            notificationService.ShowNotification(
            titulo: "Error",
            mensaje: "Ocurrio un error y no fue posible guardar",
            NotificationSeverity.Error);
        }
    }

    public void AgregarDetalle()
    {
        detalle.ImagenURL = insumoService.ObtenerImagenUrlPorInsumoId(detalle.InsumoId);

        if (detalle.InsumoId == 0)
        {
            return;
        }
        if (compra.ComprasDetalle.Any(cd => cd.InsumoId == detalle.InsumoId))
        {
            return;
        }
        if (detalle.Cantidad > listaInsumos.FirstOrDefault(I => I.InsumosId == detalle.InsumoId).Cantidad)
        {
            return;
        }
        if (detalle.Cantidad > 0)
        {
            compra.ComprasDetalle.Add(detalle);
            DetallesAgregado.Add(detalle);
            detalle = new ComprasDetalle();

        }
        else
        {
            notificationService.ShowNotification(
            titulo: "Error",
            mensaje: "Debe completar todos los campos del detalle correctamente.",
            NotificationSeverity.Error);
        }
    }

    // public void EliminarDetalle(ComprasDetalle details)
    // {
    //     detalle = details;
    //     compra.ComprasDetalle.Remove(details);
    //     DetallesEliminado.Add(details);
    // }
}