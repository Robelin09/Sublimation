@page "/CreateCompra"
@rendermode InteractiveServer
@inject NavigationManager Navigation
@inject SuplidorService suplidorService
@inject UsuarioService usuarioservice
@inject CompraService compraservice
@inject InsumoService insumoService
@inject NotificationService notificationService
<RadzenNotification @rendermode="RenderMode.InteractiveServer"></RadzenNotification>

<PageTitle>Registro de Compras</PageTitle>
<EditForm Model="compra" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card shadow-lg">
        <div class="card-header">
            <h3>Registro de Compras</h3>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="row">
                    <div class="col col-4">
                        <label>Suplidor Id:</label>
                        <InputSelect @bind-Value="compra.SuplidorId" class="form-select">
                            @foreach (var item in listaSuplidores)
                            {
                                <option value="@item.SuplidorId">@item.Nombre</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="(() => compra.SuplidorId)"></ValidationMessage>
                    </div>
                    <div class="col col-4">
                        <label>Usuario Id:</label>
                        <InputSelect @bind-Value="compra.UsuarioId" class="form-select">
                            @foreach (var item in listaUsuarios)
                            {
                                <option value="@item.UsuarioId">@item.Nombre</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="(() => compra.UsuarioId)"></ValidationMessage>
                    </div>
                </div>
                <div class="row">
                    <div class="col col-4">
                        <label>Fecha Compra:</label>
                        <InputDate @bind-Value="compra.FechaCompra" class="form-control"></InputDate>
                        <ValidationMessage For="(() => compra.FechaCompra)"></ValidationMessage>
                    </div>
                    <div class="col col-8">
                        <label>Descripci&oacute;n:</label>
                        <InputText @bind-Value="compra.Descripcion" class="form-control"></InputText>
                        <ValidationMessage For="(() => compra.Descripcion)"></ValidationMessage>
                    </div>
                </div>
            </div>
        </div>
        <div class="container">
            <div class="card-header">
                <h4>Detalles de la Compra</h4>
            </div>
            <div class="card-body">

                <div class="row">
                    <div class="col col-6">
                        <label>Insumo:</label>
                        <InputSelect @bind-Value="detalle.InsumoId" class="form-select">
                            @foreach (var item in listaInsumos)
                            {
                                <option value="@item.InsumosId">@item.NombreInsumo</option>
                            }
                        </InputSelect>
                    </div>
                    <div class="col col-6">
                        <label>Cantidad:</label>
                        <InputNumber @bind-Value="detalle.Cantidad" class="form-control"></InputNumber>
                        <ValidationMessage For="(() => detalle.Cantidad)"></ValidationMessage>
                    </div>
                    <div class="col col-6">
                        <label>Precio:</label>
                        <InputNumber @bind-Value="detalle.Precio" class="form-control"></InputNumber>
                        <ValidationMessage For="(() => detalle.Precio)"></ValidationMessage>
                    </div>
                </div>
                <br />
                <table class='table table-bordered table-hover'>
                    <thead>
                        <tr>
                            <th>Nombre Articulo</th>
                            <th>Cantidad</th>
                            <th>Precio</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var detalle in compra.ComprasDetalle)
                        {
                            <tr>
                                <td>@detalle.InsumoId</td>
                                <td>@detalle.Cantidad</td>
                                <td>@detalle.Precio</td>
                                <td><button type="button" class="btn btn-outline-danger" @onclick="()=> EliminarDetalle(detalle)"><i class="bi bi-trash3-fill" /></button></td>
                            </tr>
                        }
                    </tbody>
                </table>
                <button type="button" @onclick="AgregarDetalle" class="btn btn-outline-primary bi bi-plus-square">Agregar</button>
            </div>
        </div>
        <div class="card-footer">
            <div class="input-group">
                <a href="/IndexCompra" class="btn btn-outline-danger bi bi-arrow-return-left"> Volver</a>
                <button type="submit" class="btn btn-outline-success bi bi-floppy-fill"> Guardar</button>
            </div>
        </div>
    </div>

</EditForm>

@code {
    public Compras compra = new Compras();
    public ComprasDetalle detalle = new ComprasDetalle();

    public List<ComprasDetalle> ListaDetalles = new List<ComprasDetalle>();
    public List<Usuarios> listaUsuarios = new List<Usuarios>();
    public List<Suplidores> listaSuplidores = new List<Suplidores>();
    public List<Insumos> listaInsumos = new List<Insumos>();

    protected override async Task OnInitializedAsync()
    {
        listaUsuarios = await usuarioservice.Listar(t => true);
        listaSuplidores = await suplidorService.Listar(t => true);
        listaInsumos = await insumoService.Listar(t => true);
        compra.FechaCompra = DateTime.Now;
    }

    public async Task Guardar()
    {
        if (compra.SuplidorId <= 0 || compra.UsuarioId <= 0)
        {
            notificationService.ShowNotification(
                titulo: "Error",
                mensaje: "Debe seleccionar un suplidor y un usuario.",
                NotificationSeverity.Error);
            return;
        }
        else
        {
            if (compra.ComprasDetalle.Count == 0)
            {
                notificationService.ShowNotification(
                titulo: "Error",
                mensaje: "No se puede registrar una compra sin el detalle",
                NotificationSeverity.Error);
                return;
            }
        }
        var guardo = await compraservice.Guardar(compra);
        if (guardo)
        {
            notificationService.ShowNotification(
            titulo: "Exito",
            mensaje: "Guardado correctamente",
            NotificationSeverity.Success);

            await Task.Delay(3000);
            Navigation.NavigateTo("/IndexCompra");
        }
        else
        {
            notificationService.ShowNotification(
            titulo: "Error",
            mensaje: "Ocurrio un error y no fue posible guardar",
            NotificationSeverity.Error);
        }
    }

    public void AgregarDetalle()
    {

        if (detalle.Cantidad > 0 && detalle.Precio > 0)
        {
            compra.ComprasDetalle.Add(detalle);
            detalle = new ComprasDetalle();

        }
        else
        {
            notificationService.ShowNotification(
                titulo: "Error",
                mensaje: "Debe completar todos los campos del detalle correctamente.",
                NotificationSeverity.Error);
        }
    }

    public void EliminarDetalle(ComprasDetalle details)
    {
        detalle = details;
        compra.ComprasDetalle.Remove(details);

    }
}
