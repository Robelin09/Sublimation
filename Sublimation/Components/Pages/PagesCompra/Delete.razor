@page "/DeleteCompra"
@page "/DeleteCompra/{CompraId:int}"
@rendermode InteractiveServer
@inject NavigationManager Navigation
@inject SuplidorService suplidorService
@inject UsuarioService usuarioService
@attribute [Authorize]
@inject CompraService compraService
@inject InsumoService insumoService
@inject DialogService dialogService
<RadzenDialog @rendermode="RenderMode.InteractiveServer"></RadzenDialog>
<RadzenNotification @rendermode="RenderMode.InteractiveServer"></RadzenNotification>

<PageTitle>Eliminar Compra</PageTitle>
<div class="card">
    <div class="card-header bg-danger text-light">
        <h1 class="mb-0">¿Desea Eliminar esta Compra?</h1>
    </div>
    <div class="card-body">

        <dl class="row">
            <dt class="col-sm-3">Compras Id:</dt>
            <dd class="col-sm-9">@compra.ComprasId</dd>

            <dt class="col-sm-3">Fecha del Registro:</dt>
            <dd class="col-sm-9">@compra.FechaCompra.ToString("dd/MM/yyyy")</dd>

            <dt class="col-sm-3">Suplidor:</dt>
            <dd class="col-sm-9">@ObtenerNombreSuplidor(compra.SuplidorId)</dd>

            <dt class="col-sm-3">Usuario:</dt>
            <dd class="col-sm-9">@ObtenerNombreUsuario(compra.UsuarioId)</dd>

            <dt class="col-sm-3">Descripci&oacute;n:</dt>
            <dd class="col-sm-9">@compra.Descripcion</dd>
        </dl>

        <table class="table table-bordered table-hover">
            <thead>
                <tr>
                    <th></th>
                    <th>Nombre del Insumo</th>
                    <th>Cantidad</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var detalle in ListaDetalleCompras)
                {
                    <tr>
                        @if (!string.IsNullOrEmpty(detalle.ImagenURL))
                        {
                            <img src="@detalle.ImagenURL" alt="Imagen del Insumo" style="max-width: 60px; max-height: 60px;">
                        }
                        <td>@ObtenerNombreInsumo(detalle.InsumoId)</td>
                        <td>@detalle.Cantidad</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div class="card-footer">
        <a href="/IndexCompra" class="btn btn-outline-primary bi bi bi-arrow-return-left"> Volver</a>
        <button type="button" class="btn btn-outline-danger bi bi-trash" @onclick="MostrarDialogoEliminar">Eliminar</button>
    </div>
</div>

@code {
    [Parameter]
    public int CompraId { get; set; }
    public Compras compra { get; set; } = new Compras();
    public ComprasDetalle CompraDetalle { get; set; } = new ComprasDetalle();
    public List<ComprasDetalle> ListaDetalleCompras { get; set; } = new List<ComprasDetalle>();

    public List<Usuarios> ListaUsuarios { get; set; } = new List<Usuarios>();
    public List<Suplidores> ListaSuplidores { get; set; } = new List<Suplidores>();
    public List<Insumos> listaInsumos { get; set; } = new List<Insumos>();


    protected override async Task OnInitializedAsync()
    {
        ListaUsuarios = await usuarioService.Listar(t => true);
        ListaSuplidores = await suplidorService.Listar(t => true);
        listaInsumos = await insumoService.Listar(t => true);
        compra = await compraService.GetCompras(CompraId);
        if (compra != null)
        {
            ListaDetalleCompras = compra.ComprasDetalle.ToList();
        }
    }

    public async Task MostrarDialogoEliminar()
    {
        var result = await dialogService.Confirm("¿Está seguro que desea eliminar este cliente?", "Confirmar eliminación");

        if (result.GetValueOrDefault())
        {
            await Eliminar();
        }
    }
    public string ObtenerNombreInsumo(int insumo)
    {
        var NombreInsumo = listaInsumos.FirstOrDefault(c => c.InsumosId == insumo);
        return NombreInsumo != null ? NombreInsumo.NombreInsumo : string.Empty;
    }
    public async Task Eliminar()
    {
        var CompraEliminada = compra;
        if (!await compraService.Existe(compra.ComprasId))
        {
            return;
        }
        if (await compraService.Eliminar(this.compra))
        {
            foreach (var DetalleAgregado in CompraEliminada.ComprasDetalle)
            {
                var insumo = listaInsumos.FirstOrDefault(I => I.InsumosId == DetalleAgregado.InsumoId);
                if (insumo != null)
                {
                    insumo.Cantidad -= DetalleAgregado.Cantidad;
                    await insumoService.Guardar(insumo);
                }
            }
            Navigation.NavigateTo("/IndexCompra");
        }
    }

    public string ObtenerNombreUsuario(int usuario)
    {
        var Nombre = ListaUsuarios.FirstOrDefault(c => c.UsuarioId == usuario);
        return Nombre != null ? Nombre.Nombre : string.Empty;
    }

    public string ObtenerNombreSuplidor(int suplidor)
    {
        var Nombre = ListaSuplidores.FirstOrDefault(c => c.SuplidorId == suplidor);
        return Nombre != null ? Nombre.Nombre : string.Empty;
    }
}